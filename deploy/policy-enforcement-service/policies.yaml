services:
  - name: tasks-service
    entrypoint: http://tasks-service:5000
    inject_token_in_swagger: True
  - name: comment-service
    entrypoint: http://comment-service:5000/
    inject_token_in_swagger: True
  - name: user-service
    entrypoint: http://user-service:5000/

model: |
  [request_definition]
  r = sub, obj, act

  [policy_definition]
  p = sub_rule, obj, act

  [policy_effect]
  e = some(where (p.eft == allow))

  [matchers]
  m = eval(p.sub_rule) && keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)
policies:
  - service: tasks-service
    rule: r.sub.is_active == true
    resource: /task
    methods: (POST)
    white_list: true
  - service: tasks-service
    rule: r.sub.is_active == true
    resource: /tasks
    methods: (GET)
    white_list: true
  - service: tasks-service
    rule: r.sub.is_active == true
    resource: /tasks/*
    methods: (GET)|(PUT)|(DELETE)
    white_list: true
  - service: comment-service
    rule: r.sub.is_active == true && r.sub.is_verified == true
    resource: /comments/*
    methods: (GET)|(POST)
    white_list: true
  - service: comment-service
    rule: r.sub.group_id == 1
    resource: /comments/*
    methods: (GET)|(POST)|(PUT)|(DELETE)
    white_list: true
  - service: user-service
    rule: r.sub.group_id == 1
    resource: /groups*
    methods: (GET)|(POST)|(PUT)|(DELETE)
    white_list: true
  - service: user-service
    resource: /auth/*
    methods: (POST)
    white_list: true
  - service: user-service
    rule: r.sub.group_id == 2
    resource: /users/me
    methods: (GET)|(PATCH)
    white_list: true
  - service: user-service
    rule: r.sub.group_id == 1
    resource: /users/*
    methods: (GET)|(PATCH)|(DELETE)
    white_list: true
